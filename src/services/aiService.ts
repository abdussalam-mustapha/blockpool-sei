import { seiMcpClient, type WalletAnalysis } from './seiMcpClient';

interface AIResponse {
  content: string;
  confidence: number;
  sources?: string[];
}

export const generateAIResponse = async (query: string): Promise<AIResponse> => {
  const lowerQuery = query.toLowerCase();
  
  try {
    // Check if MCP client is connected
    const connectionStatus = seiMcpClient.getConnectionStatus();
    if (!connectionStatus.connected) {
      return {
        content: "‚ö†Ô∏è Currently disconnected from SEI MCP Server. Attempting to reconnect...\n\nPlease try your query again in a moment. I need live blockchain data to provide accurate insights.",
        confidence: 0.1,
        sources: []
      };
    }

    // Address-specific queries
    if (lowerQuery.includes('sei1') || lowerQuery.includes('wallet')) {
      const addressMatch = query.match(/sei1[a-z0-9]{38,58}/);
      if (addressMatch) {
        const address = addressMatch[0];
        console.log('ü§ñ AI analyzing wallet:', address);
        
        try {
          const walletData = await seiMcpClient.analyzeWallet(address);
          
          if (walletData) {
            const riskLevel = walletData.riskScore < 0.3 ? 'Low' : walletData.riskScore < 0.7 ? 'Medium' : 'High';
            const tokenList = walletData.tokens.slice(0, 5).map(t => `${t.amount} ${t.denom}`).join(', ');
            
            // Check if wallet has zero balance
            const balanceValue = parseFloat(walletData.balance.replace(' SEI', ''));
            const hasBalance = balanceValue > 0;
            
            let balanceStatus = '';
            if (!hasBalance) {
              balanceStatus = 'üö´ **This wallet appears to be empty or inactive.**\n\n';
            }
            
            return {
              content: `üîç **Live Wallet Analysis: ${address}**\n\n${balanceStatus}üí∞ **Current Holdings:**\n‚Ä¢ Balance: ${walletData.balance}\n‚Ä¢ USD Value: ${walletData.tokens[0]?.value || '$0.00'}\n‚Ä¢ Tokens: ${tokenList}\n\nüìà **Activity Summary:**\n‚Ä¢ Total transactions: ${walletData.transactionCount}\n‚Ä¢ Last activity: ${walletData.lastActivity}\n‚Ä¢ Risk score: ${walletData.riskScore.toFixed(2)} (${riskLevel})\n\n${walletData.recentTransactions.length > 0 ? `üîÑ **Recent Transactions:**\n${walletData.recentTransactions.slice(0, 3).map(tx => `‚Ä¢ ${tx.description} (${tx.timestamp})`).join('\n')}` : 'üö´ **No recent transactions found**'}\n\n‚úÖ **Real-time data from SEI blockchain via MCP Server**`,
              confidence: 0.98,
              sources: [`https://seistream.app/address/${address}`, 'Live SEI MCP Server']
            };
          } else {
            return {
              content: `‚ö†Ô∏è **Unable to fetch live data for wallet ${address}**\n\nThis could be due to:\n‚Ä¢ MCP server connection issues\n‚Ä¢ Invalid address format\n‚Ä¢ Network connectivity problems\n\nüîÑ **Please try again in a moment.** The system needs live blockchain data to provide accurate wallet analysis.\n\nüîç **Address format:** SEI addresses start with 'sei1' followed by 39-59 characters`,
              confidence: 0.2,
              sources: []
            };
          }
        } catch (error) {
          console.error('‚ùå AI wallet analysis error:', error);
          return {
            content: `‚ùå **Error analyzing wallet ${address}**\n\nThere was a technical issue connecting to the SEI blockchain. Please:\n‚Ä¢ Verify the address is correct\n‚Ä¢ Check your internet connection\n‚Ä¢ Try again in a few moments\n\nüîß **Technical details:** ${error instanceof Error ? error.message : 'Unknown error'}`,
            confidence: 0.1
          };
        }
      } else {
        return {
          content: `To analyze a specific wallet, please provide a valid SEI address (starts with "sei1").\n\nüîç **I can provide real-time analysis of:**\n‚Ä¢ Current balance and token holdings\n‚Ä¢ Transaction history and patterns\n‚Ä¢ Risk assessment and security score\n‚Ä¢ Trading activity and volume\n‚Ä¢ Recent blockchain activity\n\n**Example:** "Analyze wallet sei1abc123..."\n\n‚úÖ **All data is fetched live from the SEI blockchain**`,
          confidence: 0.7
        };
      }
    }

    // Token-specific queries
    if (lowerQuery.includes('token') || lowerQuery.includes('price') || lowerQuery.includes('trending')) {
      const marketData = await seiMcpClient.getMarketData();
      
      if (marketData) {
        const topTokens = marketData.tokens?.slice(0, 5) || [];
        const tokenList = topTokens.map((token: any) => 
          `‚Ä¢ ${token.symbol}: $${token.price} (${token.change24h > 0 ? '+' : ''}${token.change24h.toFixed(2)}%)`
        ).join('\n');

        return {
          content: `üìä **Live SEI Token Market Data**\n\nüî• **Top Performing Tokens:**\n${tokenList}\n\nüìà **Market Overview:**\n‚Ä¢ Total market cap: ${marketData.totalMarketCap || 'N/A'}\n‚Ä¢ 24h volume: ${marketData.totalVolume24h || 'N/A'}\n‚Ä¢ Active pairs: ${marketData.activePairs || 'N/A'}\n\n‚ö° **Real-time data from SEI MCP Server**`,
          confidence: 0.92,
          sources: ['https://app.dragonswap.app', 'https://seistream.app/tokens']
        };
      }
    }

    // NFT queries
    if (lowerQuery.includes('nft') || lowerQuery.includes('collection')) {
      const nftActivity = await seiMcpClient.getNFTActivity();
      
      if (nftActivity && nftActivity.length > 0) {
        const recentActivity = nftActivity.slice(0, 5).map((activity: any) => 
          `‚Ä¢ ${activity.collection}: ${activity.type} - ${activity.price || 'N/A'} SEI`
        ).join('\n');

        return {
          content: `üé® **Live SEI NFT Activity**\n\nüîÑ **Recent Activity:**\n${recentActivity}\n\nüìä **Market Stats:**\n‚Ä¢ Total volume (24h): ${nftActivity.reduce((sum: number, a: any) => sum + (parseFloat(a.price) || 0), 0).toFixed(2)} SEI\n‚Ä¢ Active collections: ${new Set(nftActivity.map((a: any) => a.collection)).size}\n\n‚ö° **Real-time data from SEI MCP Server**`,
          confidence: 0.88,
          sources: ['https://palette.sei.io']
        };
      }
    }

    // Risk analysis queries
    if (lowerQuery.includes('risk') || lowerQuery.includes('safe') || lowerQuery.includes('scam')) {
      const addressMatch = query.match(/sei1[a-z0-9]{38,58}/);
      if (addressMatch) {
        const riskData = await seiMcpClient.getRiskAnalysis(addressMatch[0]);
        
        if (riskData) {
          const riskLevel = riskData.score < 0.3 ? 'üü¢ Low Risk' : riskData.score < 0.7 ? 'üü° Medium Risk' : 'üî¥ High Risk';
          
          return {
            content: `üõ°Ô∏è **Risk Analysis: ${addressMatch[0]}**\n\n‚ö†Ô∏è **Risk Level:** ${riskLevel} (${riskData.score.toFixed(2)})\n\nüîç **Analysis:**\n${riskData.factors?.map((f: string) => `‚Ä¢ ${f}`).join('\n') || 'No specific risk factors identified'}\n\nüìã **Recommendations:**\n${riskData.recommendations?.map((r: string) => `‚Ä¢ ${r}`).join('\n') || 'Standard security practices apply'}\n\n‚ö° **Live analysis from SEI MCP Server**`,
            confidence: 0.90,
            sources: ['https://seistream.app/security']
          };
        }
      }
    }

    // General market queries
    if (lowerQuery.includes('market') || lowerQuery.includes('overview') || lowerQuery.includes('stats')) {
      const marketData = await seiMcpClient.getMarketData();
      
      if (marketData) {
        return {
          content: `üìä **Live SEI Chain Overview**\n\nüí∞ **Network Stats:**\n‚Ä¢ SEI Price: $${marketData.seiPrice || '0.00'} (${marketData.seiChange24h > 0 ? '+' : ''}${marketData.seiChange24h?.toFixed(2) || '0.00'}%)\n‚Ä¢ Market Cap: ${marketData.marketCap || 'N/A'}\n‚Ä¢ 24h Volume: ${marketData.volume24h || 'N/A'}\n‚Ä¢ TVL: ${marketData.tvl || 'N/A'}\n\nüîÑ **Network Activity:**\n‚Ä¢ Active wallets: ${marketData.activeWallets || 'N/A'}\n‚Ä¢ Transactions (24h): ${marketData.transactions24h || 'N/A'}\n‚Ä¢ Average gas: ${marketData.avgGas || 'N/A'} SEI\n\n‚ö° **Real-time data from SEI MCP Server**`,
          confidence: 0.95,
          sources: ['https://seistream.app', 'https://defillama.com/chain/Sei']
        };
      }
    }

    // Default response with live connection status
    return {
      content: `ü§ñ **Blockpool AI Assistant** - Connected to SEI MCP Server ‚úÖ\n\nI can help you with real-time SEI blockchain analysis:\n\nüîç **Wallet Analysis**\n"Analyze wallet sei1abc123..." - Live wallet insights\n\nüìä **Market Data**\n"Show market overview" - Real-time prices & stats\n\nüé® **NFT Activity**\n"What's happening with NFTs?" - Live collection data\n\n‚ö†Ô∏è **Risk Assessment**\n"Is sei1xyz... safe?" - Security analysis\n\nüí° **Try asking:**\n‚Ä¢ "What's the current SEI price?"\n‚Ä¢ "Show me recent whale activity"\n‚Ä¢ "Which tokens are trending?"\n‚Ä¢ "Analyze wallet sei1..."\n\n‚ö° All data is live from the SEI blockchain via MCP Server!`,
      confidence: 0.85
    };

  } catch (error) {
    console.error('Error in AI service:', error);
    
    return {
      content: `‚ùå **Error connecting to SEI MCP Server**\n\nI'm having trouble accessing live blockchain data right now. This could be due to:\n\n‚Ä¢ MCP Server connection issues\n‚Ä¢ Network connectivity problems\n‚Ä¢ Temporary service outage\n\nPlease try again in a moment. In the meantime, you can:\n‚Ä¢ Check your internet connection\n‚Ä¢ Refresh the page\n‚Ä¢ Contact support if the issue persists`,
      confidence: 0.1,
      sources: []
    };
  }
};